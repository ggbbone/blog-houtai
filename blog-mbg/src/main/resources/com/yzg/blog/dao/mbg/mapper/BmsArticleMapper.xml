<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yzg.blog.dao.mbg.mapper.BmsArticleMapper">
  <resultMap id="BaseResultMap" type="com.yzg.blog.dao.mbg.model.BmsArticle">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="category_id" jdbcType="INTEGER" property="categoryId" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="cover" jdbcType="BIT" property="cover" />
    <result column="cover_url" jdbcType="VARCHAR" property="coverUrl" />
    <result column="created_date" jdbcType="TIMESTAMP" property="createdDate" />
    <result column="updated_date" jdbcType="TIMESTAMP" property="updatedDate" />
    <result column="last_comment_time" jdbcType="TIMESTAMP" property="lastCommentTime" />
    <result column="view_count" jdbcType="INTEGER" property="viewCount" />
    <result column="like_count" jdbcType="INTEGER" property="likeCount" />
    <result column="comment_count" jdbcType="INTEGER" property="commentCount" />
    <result column="recommend_index" jdbcType="INTEGER" property="recommendIndex" />
    <result column="hot" jdbcType="BIT" property="hot" />
    <result column="hot_index" jdbcType="INTEGER" property="hotIndex" />
    <result column="status" jdbcType="TINYINT" property="status" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.yzg.blog.dao.mbg.model.BmsArticle">
    <result column="html" jdbcType="LONGVARCHAR" property="html" />
    <result column="markdown" jdbcType="LONGVARCHAR" property="markdown" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, content, category_id, title, cover, cover_url, created_date, updated_date, 
    last_comment_time, view_count, like_count, comment_count, recommend_index, hot, hot_index, 
    status
  </sql>
  <sql id="Blob_Column_List">
    html, markdown
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.yzg.blog.dao.mbg.model.BmsArticleExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from bms_article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.yzg.blog.dao.mbg.model.BmsArticleExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bms_article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from bms_article
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from bms_article
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.yzg.blog.dao.mbg.model.BmsArticleExample">
    delete from bms_article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yzg.blog.dao.mbg.model.BmsArticle">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into bms_article (user_id, content, category_id, 
      title, cover, cover_url, 
      created_date, updated_date, last_comment_time, 
      view_count, like_count, comment_count, 
      recommend_index, hot, hot_index, 
      status, html, markdown
      )
    values (#{userId,jdbcType=INTEGER}, #{content,jdbcType=VARCHAR}, #{categoryId,jdbcType=INTEGER}, 
      #{title,jdbcType=VARCHAR}, #{cover,jdbcType=BIT}, #{coverUrl,jdbcType=VARCHAR}, 
      #{createdDate,jdbcType=TIMESTAMP}, #{updatedDate,jdbcType=TIMESTAMP}, #{lastCommentTime,jdbcType=TIMESTAMP}, 
      #{viewCount,jdbcType=INTEGER}, #{likeCount,jdbcType=INTEGER}, #{commentCount,jdbcType=INTEGER}, 
      #{recommendIndex,jdbcType=INTEGER}, #{hot,jdbcType=BIT}, #{hotIndex,jdbcType=INTEGER}, 
      #{status,jdbcType=TINYINT}, #{html,jdbcType=LONGVARCHAR}, #{markdown,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.yzg.blog.dao.mbg.model.BmsArticle">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into bms_article
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="categoryId != null">
        category_id,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="cover != null">
        cover,
      </if>
      <if test="coverUrl != null">
        cover_url,
      </if>
      <if test="createdDate != null">
        created_date,
      </if>
      <if test="updatedDate != null">
        updated_date,
      </if>
      <if test="lastCommentTime != null">
        last_comment_time,
      </if>
      <if test="viewCount != null">
        view_count,
      </if>
      <if test="likeCount != null">
        like_count,
      </if>
      <if test="commentCount != null">
        comment_count,
      </if>
      <if test="recommendIndex != null">
        recommend_index,
      </if>
      <if test="hot != null">
        hot,
      </if>
      <if test="hotIndex != null">
        hot_index,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="html != null">
        html,
      </if>
      <if test="markdown != null">
        markdown,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="categoryId != null">
        #{categoryId,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="cover != null">
        #{cover,jdbcType=BIT},
      </if>
      <if test="coverUrl != null">
        #{coverUrl,jdbcType=VARCHAR},
      </if>
      <if test="createdDate != null">
        #{createdDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedDate != null">
        #{updatedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="lastCommentTime != null">
        #{lastCommentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="viewCount != null">
        #{viewCount,jdbcType=INTEGER},
      </if>
      <if test="likeCount != null">
        #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="commentCount != null">
        #{commentCount,jdbcType=INTEGER},
      </if>
      <if test="recommendIndex != null">
        #{recommendIndex,jdbcType=INTEGER},
      </if>
      <if test="hot != null">
        #{hot,jdbcType=BIT},
      </if>
      <if test="hotIndex != null">
        #{hotIndex,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="html != null">
        #{html,jdbcType=LONGVARCHAR},
      </if>
      <if test="markdown != null">
        #{markdown,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yzg.blog.dao.mbg.model.BmsArticleExample" resultType="java.lang.Long">
    select count(*) from bms_article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update bms_article
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=VARCHAR},
      </if>
      <if test="record.categoryId != null">
        category_id = #{record.categoryId,jdbcType=INTEGER},
      </if>
      <if test="record.title != null">
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.cover != null">
        cover = #{record.cover,jdbcType=BIT},
      </if>
      <if test="record.coverUrl != null">
        cover_url = #{record.coverUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.createdDate != null">
        created_date = #{record.createdDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedDate != null">
        updated_date = #{record.updatedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastCommentTime != null">
        last_comment_time = #{record.lastCommentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.viewCount != null">
        view_count = #{record.viewCount,jdbcType=INTEGER},
      </if>
      <if test="record.likeCount != null">
        like_count = #{record.likeCount,jdbcType=INTEGER},
      </if>
      <if test="record.commentCount != null">
        comment_count = #{record.commentCount,jdbcType=INTEGER},
      </if>
      <if test="record.recommendIndex != null">
        recommend_index = #{record.recommendIndex,jdbcType=INTEGER},
      </if>
      <if test="record.hot != null">
        hot = #{record.hot,jdbcType=BIT},
      </if>
      <if test="record.hotIndex != null">
        hot_index = #{record.hotIndex,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.html != null">
        html = #{record.html,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.markdown != null">
        markdown = #{record.markdown,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update bms_article
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      content = #{record.content,jdbcType=VARCHAR},
      category_id = #{record.categoryId,jdbcType=INTEGER},
      title = #{record.title,jdbcType=VARCHAR},
      cover = #{record.cover,jdbcType=BIT},
      cover_url = #{record.coverUrl,jdbcType=VARCHAR},
      created_date = #{record.createdDate,jdbcType=TIMESTAMP},
      updated_date = #{record.updatedDate,jdbcType=TIMESTAMP},
      last_comment_time = #{record.lastCommentTime,jdbcType=TIMESTAMP},
      view_count = #{record.viewCount,jdbcType=INTEGER},
      like_count = #{record.likeCount,jdbcType=INTEGER},
      comment_count = #{record.commentCount,jdbcType=INTEGER},
      recommend_index = #{record.recommendIndex,jdbcType=INTEGER},
      hot = #{record.hot,jdbcType=BIT},
      hot_index = #{record.hotIndex,jdbcType=INTEGER},
      status = #{record.status,jdbcType=TINYINT},
      html = #{record.html,jdbcType=LONGVARCHAR},
      markdown = #{record.markdown,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update bms_article
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      content = #{record.content,jdbcType=VARCHAR},
      category_id = #{record.categoryId,jdbcType=INTEGER},
      title = #{record.title,jdbcType=VARCHAR},
      cover = #{record.cover,jdbcType=BIT},
      cover_url = #{record.coverUrl,jdbcType=VARCHAR},
      created_date = #{record.createdDate,jdbcType=TIMESTAMP},
      updated_date = #{record.updatedDate,jdbcType=TIMESTAMP},
      last_comment_time = #{record.lastCommentTime,jdbcType=TIMESTAMP},
      view_count = #{record.viewCount,jdbcType=INTEGER},
      like_count = #{record.likeCount,jdbcType=INTEGER},
      comment_count = #{record.commentCount,jdbcType=INTEGER},
      recommend_index = #{record.recommendIndex,jdbcType=INTEGER},
      hot = #{record.hot,jdbcType=BIT},
      hot_index = #{record.hotIndex,jdbcType=INTEGER},
      status = #{record.status,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.yzg.blog.dao.mbg.model.BmsArticle">
    update bms_article
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="categoryId != null">
        category_id = #{categoryId,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="cover != null">
        cover = #{cover,jdbcType=BIT},
      </if>
      <if test="coverUrl != null">
        cover_url = #{coverUrl,jdbcType=VARCHAR},
      </if>
      <if test="createdDate != null">
        created_date = #{createdDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedDate != null">
        updated_date = #{updatedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="lastCommentTime != null">
        last_comment_time = #{lastCommentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="viewCount != null">
        view_count = #{viewCount,jdbcType=INTEGER},
      </if>
      <if test="likeCount != null">
        like_count = #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="commentCount != null">
        comment_count = #{commentCount,jdbcType=INTEGER},
      </if>
      <if test="recommendIndex != null">
        recommend_index = #{recommendIndex,jdbcType=INTEGER},
      </if>
      <if test="hot != null">
        hot = #{hot,jdbcType=BIT},
      </if>
      <if test="hotIndex != null">
        hot_index = #{hotIndex,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="html != null">
        html = #{html,jdbcType=LONGVARCHAR},
      </if>
      <if test="markdown != null">
        markdown = #{markdown,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.yzg.blog.dao.mbg.model.BmsArticle">
    update bms_article
    set user_id = #{userId,jdbcType=INTEGER},
      content = #{content,jdbcType=VARCHAR},
      category_id = #{categoryId,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      cover = #{cover,jdbcType=BIT},
      cover_url = #{coverUrl,jdbcType=VARCHAR},
      created_date = #{createdDate,jdbcType=TIMESTAMP},
      updated_date = #{updatedDate,jdbcType=TIMESTAMP},
      last_comment_time = #{lastCommentTime,jdbcType=TIMESTAMP},
      view_count = #{viewCount,jdbcType=INTEGER},
      like_count = #{likeCount,jdbcType=INTEGER},
      comment_count = #{commentCount,jdbcType=INTEGER},
      recommend_index = #{recommendIndex,jdbcType=INTEGER},
      hot = #{hot,jdbcType=BIT},
      hot_index = #{hotIndex,jdbcType=INTEGER},
      status = #{status,jdbcType=TINYINT},
      html = #{html,jdbcType=LONGVARCHAR},
      markdown = #{markdown,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yzg.blog.dao.mbg.model.BmsArticle">
    update bms_article
    set user_id = #{userId,jdbcType=INTEGER},
      content = #{content,jdbcType=VARCHAR},
      category_id = #{categoryId,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      cover = #{cover,jdbcType=BIT},
      cover_url = #{coverUrl,jdbcType=VARCHAR},
      created_date = #{createdDate,jdbcType=TIMESTAMP},
      updated_date = #{updatedDate,jdbcType=TIMESTAMP},
      last_comment_time = #{lastCommentTime,jdbcType=TIMESTAMP},
      view_count = #{viewCount,jdbcType=INTEGER},
      like_count = #{likeCount,jdbcType=INTEGER},
      comment_count = #{commentCount,jdbcType=INTEGER},
      recommend_index = #{recommendIndex,jdbcType=INTEGER},
      hot = #{hot,jdbcType=BIT},
      hot_index = #{hotIndex,jdbcType=INTEGER},
      status = #{status,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>